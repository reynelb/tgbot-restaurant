from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    ConversationHandler, CommandHandler, MessageHandler, ContextTypes, filters
)

# Conversation steps
PEOPLE, DATE, TIME, NAME, PHONE, CONFIRM = range(6)

async def start_reservation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üë• –ù–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫?")
    return PEOPLE

async def get_people(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["people"] = update.message.text
    await update.message.reply_text("üìÖ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É? (–ù–∞–ø—Ä: 20/07)")
    return DATE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["date"] = update.message.text
    await update.message.reply_text("‚è∞ –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?")
    return TIME

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text
    await update.message.reply_text("üìù –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    data = context.user_data
    summary = (
        f"üìå *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏:*\n\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: {data['people']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['time']}\n"
        f"üìù –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –±—Ä–æ–Ω—å? (–¥–∞ / –Ω–µ—Ç)"
    )
    await update.message.reply_text(summary, parse_mode="Markdown")
    return CONFIRM

async def confirm_reservation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() in ["s√≠", "si", "–¥–∞", "yes"]:
        # Here you can save to a database or send a notification
        await update.message.reply_text("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –ñ–¥—ë–º –≤–∞—Å üéâ")
    else:
        await update.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# Conversation handler
handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫$"), start_reservation)],
    states={
        PEOPLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_people)],
        DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
        TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_reservation)],
    },
    fallbacks=[CommandHandler("cancel", cancel)]
)
