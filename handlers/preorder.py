from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, MessageHandler, ContextTypes, filters

# Simulated menu
MENU = {
    "–ó–∞–∫—É—Å–∫–∏": [("–ë—Ä—É—Å–∫–µ—Ç—Ç–∞", "5$"), ("–≠–º–ø–∞–Ω–∞–¥–∞—Å", "6$")],
    "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞": [("–õ–æ–º–æ –°–∞–ª—å—Ç–∞–¥–æ", "12$"), ("–ü–∞—ç–ª—å—è", "15$")],
    "–ù–∞–ø–∏—Ç–∫–∏": [("–°–æ–∫", "3$"), ("–í–∏–Ω–æ", "6$")]
}

# Build category buttons
def build_category_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(cat, callback_data=f"preorder_{cat}")]
        for cat in MENU
    ] + [[InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="preorder_confirm")]])

# Start preorder flow
async def start_preorder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["preorder"] = []
    await update.message.reply_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏:",
        reply_markup=build_category_keyboard()
    )

# Show dishes for selected category
async def select_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    category = query.data.replace("preorder_", "")
    if category == "confirm":
        return await confirm_preorder(update, context)

    items = MENU.get(category, [])
    keyboard = [
        [InlineKeyboardButton(f"{name} ‚Äì {price}", callback_data=f"add_{name}")]
        for name, price in items
    ]
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="preorder_back")])

    await query.edit_message_text(
        f"üçΩ *{category}* ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–ª—é–¥:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# Add item to preorder
async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    item = query.data.replace("add_", "")
    context.user_data.setdefault("preorder", []).append(item)
    await query.edit_message_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: *{item}*", parse_mode="Markdown")
    await query.message.reply_text(
        "üëâ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –±–ª—é–¥–∞:",
        reply_markup=build_category_keyboard()
    )

# Confirm the preorder
async def confirm_preorder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    items = context.user_data.get("preorder", [])
    if not items:
        await query.edit_message_text("‚ö† –í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª–∏.")
        return

    summary = "\n".join(f"‚Ä¢ {i}" for i in items)
    await query.edit_message_text(
        f"üì¶ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω:*\n\n{summary}\n\n–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –≤—Å—ë –∫ –≤–∞—à–µ–º—É –ø—Ä–∏—Ö–æ–¥—É!",
        parse_mode="Markdown"
    )


# Handlers
handler = MessageHandler(filters.Regex("^‚è± –ó–∞–∫–∞–∑–∞—Ç—å –µ–¥—É –∑–∞—Ä–∞–Ω–µ–µ$"), start_preorder)
callback_category = CallbackQueryHandler(select_category, pattern="^preorder_")
callback_add = CallbackQueryHandler(add_item, pattern="^add_")
