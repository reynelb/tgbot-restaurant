from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ConversationHandler, MessageHandler, ContextTypes, filters

# Conversation states
PREFERENCE, ALLERGY = range(2)

# Simulated menu database with tags
MENU_TAGS = {
    "–õ–æ–º–æ –°–∞–ª—å—Ç–∞–¥–æ": ["–º—è—Å–æ"],
    "–ü–∞—ç–ª—å—è": ["–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã"],
    "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å": ["–ª—ë–≥–∫–æ–µ", "–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ"],
    "–í–µ–≥–∞–Ω—Å–∫–∏–π –∫–∞—Ä—Ä–∏": ["–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ", "–æ—Å—Ç—Ä–æ–µ"],
    "–ë—Ä—É—Å–∫–µ—Ç—Ç–∞": ["–ª—ë–≥–∫–æ–µ", "–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ"]
}

async def start_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_kb = [["–ú—è—Å–æ", "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ"], ["–õ—ë–≥–∫–æ–µ", "–û—Å—Ç—Ä–æ–µ"], ["–ù–µ–≤–∞–∂–Ω–æ"]]
    await update.message.reply_text(
        "üç¥ –ö–∞–∫—É—é –µ–¥—É –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=ReplyKeyboardMarkup(reply_kb, resize_keyboard=True)
    )
    return PREFERENCE

async def get_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pref = update.message.text.lower()
    context.user_data["preference"] = pref
    await update.message.reply_text(
        "‚ö† –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–µ–¥—É–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å?",
        reply_markup=ReplyKeyboardRemove()
    )
    return ALLERGY

async def get_allergy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    allergy = update.message.text.lower()
    pref = context.user_data["preference"]

    # Filter menu based on preference
    suggestions = []
    for dish, tags in MENU_TAGS.items():
        if pref == "–Ω–µ–≤–∞–∂–Ω–æ" or pref in tags:
            if allergy not in dish.lower():
                suggestions.append(dish)

    if suggestions:
        text = "üë®‚Äçüç≥ –°–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n\n"
        text += "\n".join(f"‚Ä¢ {s}" for s in suggestions[:3])
    else:
        text = "üòï –ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª–Ω—ã–º –º–µ–Ω—é."

    await update.message.reply_text(text)
    return ConversationHandler.END

# Cancel command
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ü–æ–º–æ—â–Ω–∏–∫ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# Conversation handler
handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^üß≠ –ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º$"), start_help)],
    states={
        PREFERENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_preference)],
        ALLERGY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_allergy)],
    },
    fallbacks=[],
)
